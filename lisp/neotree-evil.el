(defvar neotree-mode-map
  (let ((map (make-sparse-keymap)))
    ;; (define-key map (kbd "SPC") 'neotree-enter)
    ;; (define-key map (kbd "TAB") 'neotree-enter)
    (define-key map (kbd "RET") 'neotree-enter)
    (define-key map (kbd "o") '(lambda () (forward-word) (neotree-enter)))
    (define-key map (kbd "g") 'neotree-refresh)
    (define-key map (kbd "p") 'previous-line)
    (define-key map (kbd "n") 'next-line)
    (define-key map (kbd "A") 'neotree-stretch-toggle)
    (define-key map (kbd "H") 'neotree-hidden-file-toggle)
    (define-key map (kbd "q") 'neotree-hide)
    (define-key map (kbd "C-x C-f") 'find-file-other-window)
    (define-key map (kbd "C-x 1") 'neotree-empty-fn)
    (define-key map (kbd "C-x 2") 'neotree-empty-fn)
    (define-key map (kbd "C-x 3") 'neotree-empty-fn)
    (define-key map (kbd "C-c C-f") 'find-file-other-window)
    (define-key map (kbd "C-c C-c") 'neotree-change-root)
    (cond
     ((eq neo-keymap-style 'default)
      (define-key map (kbd "C-c C-n") 'neotree-create-node)
      (define-key map (kbd "C-c C-d") 'neotree-delete-node)
      (define-key map (kbd "C-c C-r") 'neotree-rename-node))
     ((eq neo-keymap-style 'concise)
      (define-key map (kbd "c") 'neotree-create-node)
      (define-key map (kbd "+") 'neotree-create-node)
      (define-key map (kbd "d") 'neotree-delete-node)
      (define-key map (kbd "r") 'neotree-rename-node)
      (define-key map (kbd "e") 'neotree-enter)))
    map)
  "Keymap for `neotree-mode'.")

(setq neo-hidden-files-regexp "^\\.")
(setq neo-keymap-style 'concise)

(provide 'neotree-evil)
